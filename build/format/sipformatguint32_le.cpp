/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.1.1
 */

#include "sipAPIformat.h"

#line 9 "/home/DOMAIN.TEST/administrator/gvdb/policy_bin_reader.sip"
#include <gvdb-format.h>
#line 12 "/home/DOMAIN.TEST/administrator/gvdb/build/format/sipformatguint32_le.cpp"



extern "C" {static void assign_guint32_le(void *, Py_ssize_t, void *);}
static void assign_guint32_le(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::guint32_le *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::guint32_le *>(sipSrc);
}


extern "C" {static void *array_guint32_le(Py_ssize_t);}
static void *array_guint32_le(Py_ssize_t sipNrElem)
{
    return new  ::guint32_le[sipNrElem];
}


extern "C" {static void *copy_guint32_le(const void *, Py_ssize_t);}
static void *copy_guint32_le(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::guint32_le(reinterpret_cast<const  ::guint32_le *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_guint32_le(void *, int, void *);}
static void release_guint32_le(void *sipCppV, int, void *)
{
     ::guint32_le *sipCpp = reinterpret_cast< ::guint32_le *>(sipCppV);
    delete sipCpp;
}



extern "C" {static int convertTo_guint32_le(PyObject *, void **, int *, PyObject *, void **);}
static int convertTo_guint32_le(PyObject *sipPy, void **sipCppPtrV, int *sipIsErr, PyObject *, void **)
{
     ::guint32_le **sipCppPtr = reinterpret_cast< ::guint32_le **>(sipCppPtrV);

#line 19 "/home/DOMAIN.TEST/administrator/gvdb/policy_bin_reader.sip"
    if (sipIsErr == NULL)
    {
        return (PyLong_Check(sipPy));
    }

    if (sipPy == Py_None)
    {
        *sipCppPtr = new guint32_le();
        return 1;
    }

    if (PyLong_Check(sipPy))
    {
        guint32_le *le = new guint32_le();
        le->value = PyLong_AS_LONG(sipPy);
        *sipCppPtr = le;
        return 1;
    }
    return 0;
#line 72 "/home/DOMAIN.TEST/administrator/gvdb/build/format/sipformatguint32_le.cpp"
}


extern "C" {static PyObject *convertFrom_guint32_le(void *, PyObject *);}
static PyObject *convertFrom_guint32_le(void *sipCppV, PyObject *)
{
    ::guint32_le *sipCpp = reinterpret_cast< ::guint32_le *>(sipCppV);

#line 13 "/home/DOMAIN.TEST/administrator/gvdb/policy_bin_reader.sip"
    PyObject* pSize;
    pSize = PyLong_FromUnsignedLong(sipCpp->value);  
    return pSize;
#line 85 "/home/DOMAIN.TEST/administrator/gvdb/build/format/sipformatguint32_le.cpp"
}


sipMappedTypeDef sipTypeDef_format_guint32_le = {
    {
        SIP_NULLPTR,
        SIP_TYPE_MAPPED,
        sipNameNr_guint32_le,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_guint32_le,
    array_guint32_le,
    copy_guint32_le,
    release_guint32_le,
    convertTo_guint32_le,
    convertFrom_guint32_le
};
