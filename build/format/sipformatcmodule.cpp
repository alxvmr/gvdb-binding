/*
 * Module code.
 *
 * Generated by SIP 6.1.1
 */

#include "sipAPIformat.h"

#line 89 "/home/DOMAIN.TEST/administrator/gvdb/policy_bin_reader.sip"
    #include <gvdb-format.h>
#line 12 "/home/DOMAIN.TEST/administrator/gvdb/build/format/sipformatcmodule.cpp"
#line 122 "/home/DOMAIN.TEST/administrator/gvdb/policy_bin_reader.sip"
    #include <gvdb-format.h>
#line 15 "/home/DOMAIN.TEST/administrator/gvdb/build/format/sipformatcmodule.cpp"
#line 155 "/home/DOMAIN.TEST/administrator/gvdb/policy_bin_reader.sip"
#include <gvdb-format.h>
#line 18 "/home/DOMAIN.TEST/administrator/gvdb/build/format/sipformatcmodule.cpp"
#line 155 "/home/DOMAIN.TEST/administrator/gvdb/policy_bin_reader.sip"
#include <gvdb-format.h>
#line 240 "/home/DOMAIN.TEST/administrator/gvdb/policy_bin_reader.sip"
        #include <gvdb-format.h>

        struct union_wrapper
        {
            union value u;
        };
#line 28 "/home/DOMAIN.TEST/administrator/gvdb/build/format/sipformatcmodule.cpp"

/* Define the strings used by this module. */
const char sipStrings_format[] = {
    'g', 'v', 'd', 'b', '_', 'h', 'a', 's', 'h', '_', 'i', 't', 'e', 'm', ':', ':', 'u', 'n', 'i', 'o', 'n', '_', 'w', 'r', 'a', 'p', 'p', 'e', 'r', 0,
    'g', 'v', 'd', 'b', '_', 'h', 'a', 's', 'h', '_', 'h', 'e', 'a', 'd', 'e', 'r', 0,
    'g', 'v', 'd', 'b', '_', 'h', 'a', 's', 'h', '_', 'i', 't', 'e', 'm', 0,
    'n', '_', 'b', 'l', 'o', 'o', 'm', '_', 'w', 'o', 'r', 'd', 's', 0,
    'g', 'v', 'd', 'b', '_', 'p', 'o', 'i', 'n', 't', 'e', 'r', 0,
    'g', 'v', 'd', 'b', '.', 'f', 'o', 'r', 'm', 'a', 't', 0,
    'h', 'a', 's', 'h', '_', 'v', 'a', 'l', 'u', 'e', 0,
    'g', 'u', 'i', 'n', 't', '1', '6', '_', 'l', 'e', 0,
    'g', 'u', 'i', 'n', 't', '3', '2', '_', 'l', 'e', 0,
    'k', 'e', 'y', '_', 's', 't', 'a', 'r', 't', 0,
    'n', '_', 'b', 'u', 'c', 'k', 'e', 't', 's', 0,
    'k', 'e', 'y', '_', 's', 'i', 'z', 'e', 0,
    'd', 'i', 'r', 'e', 'c', 't', 0,
    'u', 'n', 'u', 's', 'e', 'd', 0,
    'p', 'a', 'r', 'e', 'n', 't', 0,
    't', 'y', 'p', 'e', 0,
    'e', 'n', 'd', 0,
};


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes_format[] = {
    &sipTypeDef_format_guint16_le.mtd_base,
    &sipTypeDef_format_guint32_le.mtd_base,
    &sipTypeDef_format_gvdb_hash_header.ctd_base,
    &sipTypeDef_format_gvdb_hash_item.ctd_base,
    &sipTypeDef_format_gvdb_hash_item_union_wrapper.ctd_base,
    &sipTypeDef_format_gvdb_pointer.ctd_base,
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_format = {
    0,
    SIP_ABI_MINOR_VERSION,
    sipNameNr_gvdb_format,
    0,
    sipStrings_format,
    SIP_NULLPTR,
    6,
    sipExportedTypes_format,
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_format;


/* The Python module initialisation function. */
#if defined(SIP_STATIC_MODULE)
extern "C" PyObject *PyInit_format()
#else
PyMODINIT_FUNC PyInit_format()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_NULLPTR, SIP_NULLPTR, 0, SIP_NULLPTR}
    };

    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "gvdb.format",
        SIP_NULLPTR,
        -1,
        sip_methods,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR
    };

    PyObject *sipModule, *sipModuleDict;
    /* Initialise the module and get it's dictionary. */
    if ((sipModule = PyModule_Create(&sip_module_def)) == SIP_NULLPTR)
        return SIP_NULLPTR;

    sipModuleDict = PyModule_GetDict(sipModule);

    if ((sipAPI_format = sip_init_library(sipModuleDict)) == SIP_NULLPTR)
        return SIP_NULLPTR;

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_format, SIP_ABI_MAJOR_VERSION, SIP_ABI_MINOR_VERSION, 0) < 0)
    {
        Py_DECREF(sipModule);
        return SIP_NULLPTR;
    }
    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_format,sipModuleDict) < 0)
    {
        Py_DECREF(sipModule);
        return SIP_NULLPTR;
    }

    return sipModule;
}
